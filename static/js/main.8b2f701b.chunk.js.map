{"version":3,"sources":["components/EmployeeCard/index.js","components/EmployeeTable/index.js","components/Wrapper/index.js","components/Title/index.js","components/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","employee","className","alt","name","src","image","occupation","department","EmployeeTable","employees","map","key","id","Wrapper","props","children","Title","NavBar","type","value","onClick","event","updateFilter","target","App","state","currentFilter","setState","filterEmployees","sort","a","b","nameA","toUpperCase","nameB","filter","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"07JA0BeA,MAvBf,YAAqC,IAAbC,EAAY,EAAZA,SACtB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAASG,KAAMC,IAAKJ,EAASK,SAEzC,yBAAKJ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAASG,MAEnC,4BACE,+CADF,IACgCH,EAASM,YAEzC,4BACE,+CADF,IACgCN,EAASO,gBCTpCC,MANf,YACE,OADoC,EAAbC,UACNC,KAAI,SAAAV,GAAQ,OAC3B,kBAAC,EAAD,CAAcA,SAAUA,EAAUW,IAAKX,EAASY,S,MCErCC,MAJf,SAAiBC,GACf,OAAO,yBAAKb,UAAU,WAAWa,EAAMC,W,MCG1BC,MAJf,SAAeF,GACb,OAAO,wBAAIb,UAAU,SAASa,EAAMC,W,aCmEvBE,MApEf,SAAgBH,GACd,OACE,yBAAKb,UAAU,WACb,4BACEiB,KAAK,SACLjB,UAAU,SACVkB,MAAM,aACNC,QAAS,SAAAC,GACPP,EAAMQ,aAAaD,EAAME,OAAOJ,SALpC,gBAWA,4BACED,KAAK,SACLC,MAAM,aACNC,QAAS,SAAAC,GACPP,EAAMQ,aAAaD,EAAME,OAAOJ,QAElClB,UAAU,UANZ,wBAUA,4BACEiB,KAAK,SACLC,MAAM,YACNC,QAAS,SAAAC,GACPP,EAAMQ,aAAaD,EAAME,OAAOJ,QAElClB,UAAU,UANZ,uBAUA,4BACEiB,KAAK,SACLC,MAAM,aACNC,QAAS,SAAAC,GACPP,EAAMQ,aAAaD,EAAME,OAAOJ,QAElClB,UAAU,UANZ,wBAUA,4BACEiB,KAAK,SACLC,MAAM,YACNC,QAAS,SAAAC,GACPP,EAAMQ,aAAaD,EAAME,OAAOJ,QAElClB,UAAU,UANZ,uBAUA,4BACEiB,KAAK,SACLC,MAAM,GACNC,QAAS,SAAAC,GACPP,EAAMQ,aAAaD,EAAME,OAAOJ,QAElClB,UAAU,UANZ,cCPSuB,E,4MA1CbC,MAAQ,CACNhB,YACAiB,cAAe,M,EAGjBJ,aAAe,SAAAf,GACb,EAAKoB,SAAS,CAAED,cAAenB,K,EAGjCqB,gBAAkB,WAChB,MAAiC,eAA7B,EAAKH,MAAMC,cACN,EAAKD,MAAMhB,UAAUoB,MAAK,SAACC,EAAGC,GACnC,IAAIC,EAAQF,EAAE3B,KAAK8B,cACfC,EAAQH,EAAE5B,KAAK8B,cACnB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAEF,KAEA,EAAKT,MAAMC,cACb,EAAKD,MAAMhB,UAAU0B,QAC1B,SAAAnC,GAAQ,OAAIA,EAASO,aAAe,EAAKkB,MAAMC,iBAG5C,EAAKD,MAAMhB,W,uDAIlB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQa,aAAcc,KAAKd,eAC3B,kBAAC,EAAD,2BAEA,kBAAC,EAAD,CAAeb,UAAW2B,KAAKR,yB,GArCrBS,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b2f701b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeCard({ employee }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={employee.name} src={employee.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {employee.name}\r\n          </li>\r\n          <li>\r\n            <strong>Occupation:</strong> {employee.occupation}\r\n          </li>\r\n          <li>\r\n            <strong>Department:</strong> {employee.department}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;\r\n","import React from \"react\";\r\nimport EmployeeCard from \"../EmployeeCard\";\r\n\r\nfunction EmployeeTable({ employees }) {\r\n  return employees.map(employee => (\r\n    <EmployeeCard employee={employee} key={employee.id} />\r\n  ));\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <div className=\"buttons\">\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-lg\"\r\n        value=\"sortButton\"\r\n        onClick={event => {\r\n          props.updateFilter(event.target.value);\r\n        }}\r\n      >\r\n        Sort by Name\r\n      </button>\r\n\r\n      <button\r\n        type=\"button\"\r\n        value=\"Gryffindor\"\r\n        onClick={event => {\r\n          props.updateFilter(event.target.value);\r\n        }}\r\n        className=\"btn-lg\"\r\n      >\r\n        Show All Gryffindors\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        value=\"Slytherin\"\r\n        onClick={event => {\r\n          props.updateFilter(event.target.value);\r\n        }}\r\n        className=\"btn-lg\"\r\n      >\r\n        Show All Slytherins\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        value=\"Hufflepuff\"\r\n        onClick={event => {\r\n          props.updateFilter(event.target.value);\r\n        }}\r\n        className=\"btn-lg\"\r\n      >\r\n        Show All Hufflepuffs\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        value=\"Ravenclaw\"\r\n        onClick={event => {\r\n          props.updateFilter(event.target.value);\r\n        }}\r\n        className=\"btn-lg\"\r\n      >\r\n        Show All Ravenclaws\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        value=\"\"\r\n        onClick={event => {\r\n          props.updateFilter(event.target.value);\r\n        }}\r\n        className=\"btn-lg\"\r\n      >\r\n        Show All\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\nimport EmployeeTable from \"./components/EmployeeTable\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport employees from \"./employees.json\";\nimport NavBar from \"./components/NavBar\";\n\nclass App extends Component {\n  state = {\n    employees,\n    currentFilter: null\n  };\n\n  updateFilter = department => {\n    this.setState({ currentFilter: department });\n  };\n\n  filterEmployees = () => {\n    if (this.state.currentFilter === \"sortButton\") {\n      return this.state.employees.sort((a, b) => {\n        var nameA = a.name.toUpperCase();\n        var nameB = b.name.toUpperCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      });\n    } else if (this.state.currentFilter) {\n      return this.state.employees.filter(\n        employee => employee.department === this.state.currentFilter\n      );\n    }\n    return this.state.employees;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <NavBar updateFilter={this.updateFilter} />\n        <Title>Hogwarts Employees</Title>\n\n        <EmployeeTable employees={this.filterEmployees()} />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}